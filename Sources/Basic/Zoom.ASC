
' fabrication des tables de zoom pour le labyrinthe mappé
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
' Déclarations 
' ~~~~~~~~~~~~ 
DEBUG=1
'
Reserve As Work 1,50*1024
ADR=Start(1)
'
MAP_WIDTH=106
MAP_HEIGHT=65
MAP_OFFSET=2
'
BLK_WIDTH=80
BLK_HEIGHT=64
BLK_SIZE=BLK_WIDTH*BLK_HEIGHT*2
'
FIRST_ZOOM=1
LAST_ZOOM=200
NB_ZOOM=LAST_ZOOM-FIRST_ZOOM+1
'
NB_LIGHT=15
'
TEMP_REG=0
SRC_REG=0
DEST_REG=1
'
Dim OFFSET(LAST_ZOOM-FIRST_ZOOM+1)
'
Global ADR
Global MAP_WIDTH,MAP_HEIGHT,MAP_OFFSET
Global BLK_WIDTH,BLK_HEIGHT,BLK_SIZE
Global FIRST_ZOOM,LAST_ZOOM,NB_ZOOM
Global NB_LIGHT
Global TEMP_REG,SRC_REG,DEST_REG
If DEBUG
   OLD_DEST_POS=0
   LIGHT=0
   Y=0
   Global DEBUG,OLD_DEST_POS,LIGHT,Y
End If 
'
' le code commence ici ! 
' ~~~~~~~~~~~~~~~~~~~~~~ 
OPEN_SCR
'
' on boucle pour tous les zooms possibles
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
For H=FIRST_ZOOM To LAST_ZOOM
   OLD_SRC_POS=0
   SRC_POS=0
   OLD_DEST_POS=(MAP_HEIGHT-H)/2
   DEST_POS=(MAP_HEIGHT-H)/2
   NB=0
   OFFSET(H-FIRST_ZOOM)=ADR-Start(1)
   '
   GENERATE_INIT[DEST_POS,H]
   BACK_OFFSET=-Param
   '
   ' on calcule le zoom de hauteur H
   ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   For A=0 To H-1
      SRC_POS=(A*BLK_HEIGHT)/H
      '
      If(DEST_POS>=0) and(DEST_POS<MAP_HEIGHT)
         If SRC_POS=OLD_SRC_POS
            Inc NB
         Else 
            GENERATE_CODE[NB,OLD_SRC_POS]
            OLD_SRC_POS=SRC_POS
            OLD_DEST_POS=DEST_POS
            NB=1
         End If 
      End If 
      Inc DEST_POS
   Next A
   '
   GENERATE_CODE[NB,OLD_SRC_POS]
   GENERATE_EXIT[BACK_OFFSET]
   If DEBUG
      ADR=Start(1)
      Inc Y
   End If 
   Locate 32,1 : Print H
   Locate 32,3 : Print ADR-Start(1)
Next H
' sauvegarde de la table 
' ~~~~~~~~~~~~~~~~~~~~~~ 
If DEBUG=0
   Bsave "Asm:.S/Tmap/Table_Zoom.RAW",Start(1) To ADR
   ' sauvegarde des offsets 
   ' ~~~~~~~~~~~~~~~~~~~~~~ 
   ADR=Start(1)
   For I=0 To LAST_ZOOM-1
      Loke ADR,OFFSET(I)
      Add ADR,4
   Next I
   Bsave "Asm:.S/Tmap/Table_Zoom_Offset.RAW",Start(1) To ADR
End If 
Repeat : Until Inkey$<>""
CLOZ_SCR
'
'
'
'
' gestion de l'écran 
' ~~~~~~~~~~~~~~~~~~ 
Procedure OPEN_SCR
Procedure CLOZ_SCR
'
' génération d'un LEA d16(An),An pour l'init   
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
Procedure GENERATE_INIT[DEST_POS,H]
   LIGHT=(NB_LIGHT*(H-FIRST_ZOOM))/NB_ZOOM
   OFFSET=MAP_OFFSET+LIGHT*BLK_SIZE
   If DEST_POS>0
      Add OFFSET,DEST_POS*2
   End If 
   If OFFSET
      OP=%100000111101000+DEST_REG+DEST_REG*2^9
      Doke ADR,OP
      Doke ADR+2,OFFSET
      Add ADR,4
   End If 
End Proc[OFFSET+H]
'
' génération d'un LEA d16(An),An avant de sortir 
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
Procedure GENERATE_EXIT[OFFSET]
   If OFFSET
      OP=%100000111101000+DEST_REG+DEST_REG*2^9
      Doke ADR,OP
      Doke ADR+2,OFFSET
      Doke ADR+4,$4E75
      Add ADR,6
   End If 
End Proc
'
' génération de code en conséquence
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Procedure GENERATE_CODE[NB,SRC_POS]
   If NB=1
      ' move.b d16(an),(am)+ 
      ' ~~~~~~~~~~~~~~~~~~~~ 
      GENERATE_MOVE_SRC_TO_DEST[SRC_POS*2]
   Else 
      ' move.b d16(an),dn
      ' rept NB
      ' move.b dn,(am)+
      ' ENDR 
      ' ~~~~~~~~~~~~~~~~~~ 
      GENERATE_MOVE_SRC_TO_TEMP[SRC_POS*2]
      GENERATE_MOVE_TEMP_TO_DEST[NB]
   End If 
   '
   If DEBUG
      Ink Point(319,30+SRC_POS)-28+2*LIGHT
      For I=0 To NB-1
         Plot Y,OLD_DEST_POS+I
      Next I
   End If 
End Proc
'
' génération d'un MOVE.W d16(Am),(An)+ 
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
Procedure GENERATE_MOVE_SRC_TO_DEST[D_SRC]
   OP=%11000011000000+SRC_REG+DEST_REG*2^9
   If D_SRC
      OP=OP or %101000
   Else 
      OP=OP or %10000
   End If 
   '
   Doke ADR,OP
   Add ADR,2
   '    
   If D_SRC
      Doke ADR,D_SRC
      Add ADR,2
   End If 
End Proc
'
' génération d'un MOVE.W d16(Am),Dn
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Procedure GENERATE_MOVE_SRC_TO_TEMP[D_SRC]
   OP=%11000000000000+SRC_REG+TEMP_REG*2^9
   If D_SRC Then OP=OP+%101000 Else OP=OP+%10000
   Doke ADR,OP
   Add ADR,2
   
   If D_SRC
      Doke ADR,D_SRC
      Add ADR,2
   End If 
End Proc
'
' génération de plusieurs MOVE.W Dn,(An)+  
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  
Procedure GENERATE_MOVE_TEMP_TO_DEST[NB]
   D_DEST=D_DEST-SCR_WIDTH*(SCR_HEIGHT/2)
   OP=%11000011000000+TEMP_REG+DEST_REG*2^9
   '
   For I=1 To NB
      Doke ADR,OP
      Add ADR,2
   Next I
End Proc
