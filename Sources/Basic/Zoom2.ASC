

MAP_WIDTH=105
MAP_HEIGHT=105
MAP_OFFSET=2

BLK_WIDTH=80
BLK_HEIGHT=64
BLK_SIZE=BLK_WIDTH*BLK_HEIGHT*2

FIRST_ZOOM=1
LAST_ZOOM=MAP_HEIGHT*2
NB_ZOOM=LAST_ZOOM-FIRST_ZOOM+1

NB_LIGHT=16

TEMP_REG=0
SRC_REG=0
DEST_REG=1


* Generation complète de Table_Zoom_Offset & Table_Zoom
* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Build_Table_Zoom
	lea Table_Zoom_Offset(a5),a0
	lea Table_Zoom(a5),a1

	moveq #FIRST_ZOOM,d0		For H=FIRST ZOOM To LAST_ZOOM
.For_H
;;;;	moveq #0,d1			OLD_SRC_POS
	moveq #0,d2			SRC_POS
	move.w #MAP_HEIGHT,d3
	sub.w d0,d3
	asr.w #1,d3			DEST_POS=(MAP_HEIGHT-H)/2
	moveq #0,d4			NB=0
.make_offset
	move.w #$60ff,(a0)+
	move.l a1,d5
	sub.l a0,d5
	subq.l #2,d5
	move.l d5,(a0)+			bra.l <offset>

	bsr Generate_INIT		en retour d5=BACK_OFFSET

	moveq #0,d6			For A=0 To H-1
.For_A
	tst.w d3			If DEST_POS<0
	blt.s .outside_map		OR
	cmp.w #MAP_HEIGHT,d3		DEST_POS>=MAP_HEIGHT
	bge.s .outside_map		=> OUT !
.inside_map
	move.w d2,d1			OLD_SRC_POS=SRC_POS

	move.w #BLK_HEIGHT,d2
	mulu.w d6,d2
	divs.w d0,d2			SRC_POS=(A*BLK_HEIGHT)/H

	cmp.w d2,d1			OLD_SRC_POS=SRC_POS ?
	bne.s .generate
.count
	addq.w #1,d4			Inc NB
	bra.s .outside_map
.generate
	bsr Generate_CODE
	moveq #1,d4

.outside_map
	addq.w #1,d3			Inc DEST_POS
.Next_A
	addq.w #1,d6
	cmp.w d6,d0
	blt.s .For_A

	bsr Generate_CODE
	bsr Generate_EXIT

.Next_H
	addq.w #1,d0
	cmp.w #LAST_ZOOM,d0
	ble.s .For_H
	rts


* Generation du LEA d'init
* ~~~~~~~~~~~~~~~~~~~~~~~~
* d5-d7/a2-a4
Generate_INIT
	move.w d0,d5
	sub.w #FIRST_ZOOM,d5
	mulu.w #NB_LIGHT,d5
	divs.w #NB_ZOOM,d5		LIGHT=(NB_LIGHT*(H-FIRST_ZOOM))/NB_ZOOM
	mulu.w #BLK_SIZE,d5
	addq.w #MAP_OFFSET,d5		OFFSET=MAP_OFFSET+LIGHT*BLK_SIZE

	tst.w d3			DEST_POS<0 ?
	blt.s .outside_map
	add.w d3,d5
	add.w d3,d5			OFFSET=OFFSET+DEST_POS*2
.outside_map
	tst.w d5			OFFSET<0 ?
	blt.s .no_lea
	move.w #%100000111101000|DEST_REG|(DEST_REG*2^9),(a1)+
	move.w d5,(a1)+
.no_lea
	add.w d0,d5			retour BACK_OFFSET
	rts


* Generation partiel du CODE du zoom
* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* d7/a2-a4
Generate_CODE
	rts


* Generation du LEA + RTS
* ~~~~~~~~~~~~~~~~~~~~~~~
* d5-d7/a2-a4
Generate_EXIT
	move.w #%100000111101000|DEST_REG|(DEST_REG*2^9),(a1)+
	move.w d5,(a1)+
	move.w #$4e75,(a1)+
	rts

	
	IFNE 0
' on boucle pour tous les zooms possibles
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
For H=FIRST_ZOOM To LAST_ZOOM
   '
   OLD_SRC_POS=0
   SRC_POS=0
   DEST_POS=(MAP_HEIGHT-H)/2
   NB=0
   OFFSET(H-FIRST_ZOOM)=ADR-Start(1)
   '
   GENERATE_INIT_LEA[DEST_POS,H,FIRST_ZOOM,NB_ZOOM]
   BACK_OFFSET=-Param
   '
   ' on calcule le zoom de hauteur H
   ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   For A=0 To H-1
      If(DEST_POS>=0) and(DEST_POS<MAP_HEIGHT)
         ' c'est le meme point source ? 
         ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
         OLD_SRC_POS=SRC_POS
         SRC_POS=(A*BLK_HEIGHT)/H
         '          
         If SRC_POS=OLD_SRC_POS
            Inc NB
         Else 
            GENERATE_CODE[NB,OLD_SRC_POS]
            NB=1
         End If 
      End If 
      Inc DEST_POS
   Next A
   GENERATE_CODE[NB,SRC_POS]
   GENERATE_EXIT_LEA[BACK_OFFSET]
   GENERATE_RTS
Next H
' sauvegarde de la table 
' ~~~~~~~~~~~~~~~~~~~~~~ 
Bsave "Asm:.S/Tmap/Table_Zoom.RAW",Start(1) To ADR
' sauvegarde des offsets 
' ~~~~~~~~~~~~~~~~~~~~~~ 
ADR=Start(1)
For I=0 To LAST_ZOOM-1
   Loke ADR,OFFSET(I)
   Add ADR,4
Next I
Bsave "Asm:.S/Tmap/Table_Zoom_Offset.RAW",Start(1) To ADR
Locate 0,3 : Print "SIZE ";ADR-Start(1)
Repeat : Until Inkey$<>""





Procedure GENERATE_INIT_LEA[DEST_POS,H,F,S]
   LIGHT=(16*(H-F))/S
   OFFSET=MAP_OFFSET+LIGHT*BLK_WIDTH*BLK_HEIGHT*2
   If DEST_POS>0
      Add OFFSET,DEST_POS*2
   End If 
   If OFFSET
      OP=%100000111101000+DEST_REG+DEST_REG*2^9
      Doke ADR,OP
      Doke ADR+2,OFFSET
      Add ADR,4
   End If 
   P_POS=DEST_POS
End Proc[OFFSET+H]
' generation d'un LEA d16(An),An pour l'init   
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
Procedure GENERATE_INIT_LEA[DEST_POS,H,F,S]
   LIGHT=(16*(H-F))/S
   OFFSET=MAP_OFFSET+LIGHT*BLK_WIDTH*BLK_HEIGHT*2
   If DEST_POS>0
      Add OFFSET,DEST_POS*2
   End If 
   If OFFSET
      OP=%100000111101000+DEST_REG+DEST_REG*2^9
      Doke ADR,OP
      Doke ADR+2,OFFSET
      Add ADR,4
   End If 
   P_POS=DEST_POS
End Proc[OFFSET+H]
'
' generation d'un LEA d16(An),An avant de sortir 
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
Procedure GENERATE_EXIT_LEA[OFFSET]
   If OFFSET
      OP=%100000111101000+DEST_REG+DEST_REG*2^9
      Doke ADR,OP
      Doke ADR+2,OFFSET
      Add ADR,4
   End If 
End Proc
'
' generation de code en conséquence
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Procedure GENERATE_CODE[NB,SRC_POS]
   If NB=1
      ' move.b d16(an),(am)+ 
      ' ~~~~~~~~~~~~~~~~~~~~ 
      GENERATE_MOVE_SRC_TO_DEST[SRC_POS*2]
   Else 
      ' move.b d16(an),dn
      ' rept NB
      ' move.b dn,(am)+
      ' ENDR 
      ' ~~~~~~~~~~~~~~~~~~ 
      GENERATE_MOVE_SRC_TO_TEMP[SRC_POS*2]
      GENERATE_MOVE_TEMP_TO_DEST[NB]
   End If 
   '
   If DEBUG
      Ink Point(SRC_POS,0)
      Draw DEST_POS-NB,6 To DEST_POS-1,6
   End If 
End Proc
'
' procedure pour generer un MOVE.W d16(Am),(An)+ 
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
Procedure GENERATE_MOVE_SRC_TO_DEST[D_SRC]
   OP=%11000011000000+SRC_REG+DEST_REG*2^9
   If D_SRC
      OP=OP or %101000
   Else 
      OP=OP or %10000
   End If 
   '
   Doke ADR,OP
   Add ADR,2
   '    
   If D_SRC
      Doke ADR,D_SRC
      Add ADR,2
   End If 
End Proc
'
' procedure pour generer un MOVE.W d16(Am),Dn
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Procedure GENERATE_MOVE_SRC_TO_TEMP[D_SRC]
   OP=%11000000000000+SRC_REG+TEMP_REG*2^9
   If D_SRC Then OP=OP+%101000 Else OP=OP+%10000
   Doke ADR,OP
   Add ADR,2
   
   If D_SRC
      Doke ADR,D_SRC
      Add ADR,2
   End If 
End Proc
'
' procedure pour generer plusieurs MOVE.W Dn,(An)+ 
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
Procedure GENERATE_MOVE_TEMP_TO_DEST[NB]
   D_DEST=D_DEST-SCR_WIDTH*(SCR_HEIGHT/2)
   OP=%11000011000000+TEMP_REG+DEST_REG*2^9
   '
   For I=1 To NB
      Doke ADR,OP
      Add ADR,2
   Next I
End Proc
'
' generation d'un RTS
' ~~~~~~~~~~~~~~~~~~~
Procedure GENERATE_RTS
   Doke ADR,$4E75
   Add ADR,2
End Proc
	ENDC



	rsreset
DataBase_Struct		rs.b 0
Table_Zoom_Offset	rs.l (LAST_ZOOM-FIRST_ZOOM+1)
Table_Zoom		rs.l 100
DataBase_SIZEOF		rs.b 0


_DataBase		ds.b DataBase_SIZEOF

