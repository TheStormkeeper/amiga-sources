

MAP_WIDTH=105
MAP_HEIGHT=105
MAP_OFFSET=2

BLK_WIDTH=80
BLK_HEIGHT=64
BLK_SIZE=BLK_WIDTH*BLK_HEIGHT*2

FIRST_ZOOM=1
LAST_ZOOM=MAP_HEIGHT*2
NB_ZOOM=LAST_ZOOM-FIRST_ZOOM+1

NB_LIGHT=8

TEMP_REG=0
SRC_REG=0
DEST_REG=1


* Generation complète de Table_Zoom_Offset & Table_Zoom
* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Build_Table_Zoom
	lea Table_Zoom_Offset(a5),a0
	lea Table_Zoom(a5),a1

	moveq #FIRST_ZOOM,d0		For H=FIRST ZOOM To LAST_ZOOM
.For_H
;;;;	moveq #0,d1			OLD_SRC_POS
	moveq #0,d2			SRC_POS
	move.w #MAP_HEIGHT,d3
	sub.w d0,d3
	asr.w #1,d3			DEST_POS=(MAP_HEIGHT-H)/2
	moveq #0,d4			NB=0
.make_offset
	move.w #$60ff,(a0)+
	move.l a1,d5
	sub.l a0,d5
	subq.l #2,d5
	move.l d5,(a0)+			bra.l <offset>

	bsr Generate_INIT		en retour d5=BACK_OFFSET

	moveq #0,d6			For A=0 To H-1
.For_A
	move.w #BLK_HEIGHT,d2
	mulu.w d6,d2
	divs.w d0,d2			SRC_POS=(A*BLK_HEIGHT)/H

	tst.w d3			If DEST_POS<0
	blt.s .outside_map		OR
	cmp.w #MAP_HEIGHT,d3		DEST_POS>=MAP_HEIGHT
	bge.s .outside_map		=> OUT !
.inside_map
	cmp.w d2,d1			OLD_SRC_POS=SRC_POS ?
	bne.s .generate
.count
	addq.w #1,d4			Inc NB
	bra.s .outside_map
.generate
	bsr Generate_CODE
	move.w d2,d1			OLD_SRC_POS=SRC_POS
	moveq #1,d4

.outside_map
	addq.w #1,d3			Inc DEST_POS
.Next_A
	addq.w #1,d6			NEXT A
	cmp.w d6,d0
	blt.s .For_A

	bsr Generate_CODE
	bsr Generate_EXIT

.Next_H
	addq.w #1,d0			NEXT H
	cmp.w #LAST_ZOOM,d0
	ble.s .For_H
	rts


* Generation du LEA d'init
* ~~~~~~~~~~~~~~~~~~~~~~~~
*   -->	d0=H
*	d1=OLD_SRC_POS
*	d2=SRC_POS
*	d3=DEST_POS
*	d4=NB
*	a0=Table_Zoom_Offset
*	a1=Table_Zoom
*
* <--	d0-d4/a0-a1
*	d5=Back_Offset
Generate_INIT
	move.w d0,d5
	sub.w #FIRST_ZOOM,d5
	mulu.w #NB_LIGHT,d5
	divs.w #NB_ZOOM,d5		LIGHT=(NB_LIGHT*(H-FIRST_ZOOM))/NB_ZOOM
	mulu.w #BLK_SIZE,d5
	addq.w #MAP_OFFSET,d5		OFFSET=MAP_OFFSET+LIGHT*BLK_SIZE

	tst.w d3			DEST_POS<0 ?
	blt.s .outside_map
	add.w d3,d5
	add.w d3,d5			OFFSET=OFFSET+DEST_POS*2
.outside_map
	tst.w d5			OFFSET<0 ?
	blt.s .no_lea
	move.w #%100000111101000|DEST_REG|(DEST_REG*2^9),(a1)+
	move.w d5,(a1)+
.no_lea
	add.w d0,d5
	add.w d0,d5
	neg.w d5			retourne BACK_OFFSET
	rts


* Generation partiel du CODE du zoom
* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*   -->	d0=H
*	d1=OLD_SRC_POS
*	d2=SRC_POS
*	d3=DEST_POS
*	d4=NB
*	d5=Back_Offset
*	d6=A
*	a0=Table_Zoom_Offset
*	a1=Table_Zoom
*
* <--	d0-d6/a0-a1
Generate_CODE
	cmp.w #1,d4
	bne.s .several
.one_only
	bra Generate_MOVE_Src_TO_Dest
.several
	bsr Generate_MOVE_Src_TO_Temp
	bra Generate_MOVE_Temp_TO_Dest


* Generation d'un MOVE Src,Dest
* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*   -->	d2=SRC_POS
*	a1=Table_Zoom
*
* <--	d0-d6/a0-a1
Generate_MOVE_Src_TO_Dest
	tst.w d2
	bne.s .extension
	move.w #%11000011010000|SRC_REG|(DEST_REG*2^9),(a1)+
	rts
.extension
	move.w #%11000011101000|SRC_REG|(DEST_REG*2^9),(a1)+
	move.w d2,(a1)+
	add.w d2,-2(a1)
	rts


* Generation d'un MOVE Src,Temp
* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*   -->	d2=SRC_POS
*	a1=Table_Zoom
*
* <--	d0-d6/a0-a1
Generate_MOVE_Src_TO_Temp
	tst.w d2
	bne.s .extension
	move.w #%11000000010000|SRC_REG|(TEMP_REG*2^9),(a1)+
	rts
.extension
	move.w #%11000000101000|SRC_REG|(TEMP_REG*2^9),(a1)+
	move.w d2,(a1)+
	add.w d2,-2(a1)
	rts


* Generation de plusieurs MOVE Temp,Dest
* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*   -->	d4=NB
*	a1=Table_Zoom
*
* <--	d0-d6/a0-a1
Generate_MOVE_Temp_TO_Dest
	move.w d4,d7
	subq.w #1,d7
.put
	move.w #%11000011000000|TEMP_REG|(DEST_REG*2^9),(a1)+
	dbf d7,.put
	rts


* Generation du LEA + RTS
* ~~~~~~~~~~~~~~~~~~~~~~~
*   -->	d5=Back_Offset
*	a1=Table_Zoom
*
* <--	d0/a0-a1
Generate_EXIT
	move.w #%100000111101000|DEST_REG|(DEST_REG*2^9),(a1)+
	move.w d5,(a1)+
	move.w #$4e75,(a1)+
	rts




	rsreset
DataBase_Struct		rs.b 0
Table_Zoom_Offset	rs.l (LAST_ZOOM-FIRST_ZOOM+1)
Table_Zoom		rs.l 100
DataBase_SIZEOF		rs.b 0


_DataBase		ds.b DataBase_SIZEOF

